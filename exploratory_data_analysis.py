# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/199737rjE5qSQnYtamYUFXiV0iGN08cli

# **Importing Libraries and Exploring the Dataset**
"""

import numpy as np # linear algebra,
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from matplotlib import pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import scipy.stats as stats
from sklearn.preprocessing import LabelEncoder
import copy
sns.set() #setting the default seaborn style for our plots"

from google.colab import drive
drive.mount('/content/drive')

insurance_df = pd.read_csv("/content/drive/MyDrive/EDA project/insurance-data.csv")

insurance_df.head()

#Info about the data shape of data, type of individual columns\n",
insurance_df.info()

"""# **Checking Missing Values and Outliers**"""

insurance_df.isna().apply(pd.value_counts)

#Checking for the outliers
plt.figure(figsize= (20,15))
plt.subplot(3,1,1)
sns.boxplot(x= insurance_df.bmi, color='blue')
plt.subplot(3,1,2)
sns.boxplot(x= insurance_df.age, color='red')
plt.subplot(3,1,3)
sns.boxplot(x= insurance_df.charges, color='yellow')
plt.show()

"""- bmi has a few extreme values.
- charges as it is highly skewed, there are quiet a lot of extreme values.
"""

insurance_df.describe().T

"""- All the statistics seem reasonable
- Age column: data looks representative of the true age distribution of the adult population with (39) mean.
- Children Column: Few people have more than 2 children (75% of the people have 2 or less children).
- The claimed amount is higly skewed as most people would require basic medi-care and only few suffer from diseases which cost more to get rid of.

# Creating Visual Methods to Analyze the Data
"""

# Plots to see the distribution of the continuous features individually
plt.figure(figsize= (20,15))
plt.subplot(3,3,1)
plt.hist(insurance_df.bmi, color='lightblue', edgecolor = 'black', alpha = 0.7)
plt.xlabel('bmi')
plt.subplot(3,3,2)
plt.hist(insurance_df.age, color='lightblue', edgecolor = 'black', alpha = 0.7)
plt.xlabel('age')
plt.subplot(3,3,3)
plt.hist(insurance_df.charges, color='lightblue', edgecolor = 'black', alpha = 0.7)
plt.xlabel('charges')
plt.show()

"""- bmi looks normally distributed.
- Age looks uniformly distributed.
- As seen in the previous step, charges are highly skewed.
"""

skewness = pd.DataFrame({"skewness":[stats.skew(insurance_df.bmi),stats.skew(insurance_df.age)
,stats.skew(insurance_df.charges)]},index =["bmi",'age','charges'])
skewness

"""- Skewness of bmi is very low as seen in the previous step
- age is uniformly distributed and thus not skewed
- charges are highly skewed
"""

x = insurance_df.smoker.value_counts()  #Values for x-axis
x

plt.figure(figsize=(20,25))

x = insurance_df.smoker.value_counts().index  #Values for x-axis
y = [insurance_df['smoker'].value_counts()[i] for i in x]  #Count of each class on y-axis
plt.subplot(4,2,1)
plt.bar(x,y, align='center',color = 'red',edgecolor = 'black',alpha = 0.7) #plot a bar chart
plt.xlabel('Smoker?')
plt.ylabel('Count ')
plt.title('Smoker distribution')

x1 = insurance_df.sex.value_counts().index  #Values for x-axis
y1 = [insurance_df['sex'].value_counts()[j] for j in x1]  #Count of each class on y-axis
plt.subplot(4,2,2)
plt.bar(x1,y1, align='center',color = 'red',edgecolor = 'black',alpha = 0.7)  #plot a bar chart
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Gender distribution')

x2 = insurance_df.region.value_counts().index  #Values for x-axis
y2 = [insurance_df['region'].value_counts()[k] for k in x2]  #Count of each class on y-axis
plt.subplot(4,2,3)
plt.bar(x2,y2, align='center',color = 'red',edgecolor = 'black',alpha = 0.7)  #plot a bar chart
plt.xlabel('Region')
plt.ylabel('Count ')
plt.title("Regions' distribution")

x3 = insurance_df.children.value_counts().index  #Values for x-axis
y3 = [insurance_df['children'].value_counts()[l] for l in x3]  # Count of each class on y-axis
plt.subplot(4,2,4)
plt.bar(x3,y3, align='center',color = 'red',edgecolor = 'black',alpha = 0.7)  #plot a bar chart
plt.xlabel('No. of children')
plt.ylabel('Count ')
plt.title("Children distribution")

plt.show()

"""- There are lot more non-smokers than smokers.
- Instances are distributed evenly accross all regions.
- Gender is also distributed evenly.
- Most instances have less than 3 children and very few have 4 or 5 children.
"""

insurance_df_encoded = copy.deepcopy(insurance_df)
insurance_df_encoded

# Label encoding the variables before doing a pairplot because pairplot ignores strings
insurance_df_encoded = copy.deepcopy(insurance_df)
insurance_df_encoded.loc[:,['sex', 'smoker', 'region']] = insurance_df_encoded.loc[:,['sex', 'smoker', 'region']].apply(LabelEncoder().fit_transform)
sns.pairplot(insurance_df_encoded)  #pairplot
plt.show()

"""- There is an obvious correlation between 'charges' and 'smoker'
- Looks like smokers claimed more money than non-smokers
- There's an interesting pattern between 'age' and 'charges'.Notice that older people are charged more than the younger ones"

# Analyzing Trends, Patterns and Relationships in the Data
"""

# Scatter plot to look for visual evidence of dependency between attributes smoker and charges accross different ages
plt.figure(figsize=(8,6))
sns.scatterplot(x=insurance_df.age,y=insurance_df.charges,hue=insurance_df.smoker,palette= ['red','green'] ,alpha=0.6)
plt.title("Difference between charges of smokers and charges of non-smokers is apparent")
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(x=insurance_df.age,y=insurance_df.charges,hue=insurance_df.sex,palette= ['pink','lightblue'])

"""- There is no apparent relation between gender and charges

"""

# T-test to check dependency of smoking on charges
Ho = "Charges of smoker and non-smoker are same"   # Stating the Null Hypothesis
Ha = "Charges of smoker and non-smoker are not the same"   # Stating the Alternate Hypothesis
x = np.array(insurance_df[insurance_df.smoker == 'yes'].charges)  # Selecting charges corresponding to smokers as an array
y = np.array(insurance_df[insurance_df.smoker == 'no'].charges) # Selecting charges corresponding to non-smokers as an array
t, p_value  = stats.ttest_ind(x,y, axis = 0)  # Performing an Independent t-test
if p_value < 0.05:  # Setting our significance level at 5%
   print(f'{Ha} as the p_value ({p_value}) < 0.05')
else:
   print(f'{Ho} as the p_value ({p_value}) > 0.05')

"""- Charges of smoker and non-smoker are not the same as the p_value 
(8.271435842177219e-283) < 0.05
- Thus, Smokers seem to claim significantly more money than non-smokers
"""

#Does bmi of males differ significantly from that of females?
print ("Does bmi of males differ significantly from that of females?")
insurance_df.sex.value_counts()   #Checking the distribution of males and females

# T-test to check dependency of bmi on gender
Ho = "Gender has no effect on bmi"   # Stating the Null Hypothesis
Ha = "Gender has an effect on bmi"   # Stating the Alternate Hypothesis
x = np.array(insurance_df[insurance_df.sex == 'male'].bmi)  # Selecting bmi values corresponding to males as an array
y = np.array(insurance_df[insurance_df.sex == 'female'].bmi) # Selecting bmi values corresponding to females as an array
t, p_value  = stats.ttest_ind(x,y, axis = 0)  #Performing an Independent t-test
if p_value < 0.05:  # Setting our significance level at 5%
  print(f'{Ha} as the p_value ({p_value.round()}) < 0.05')
else:
  print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')

"""- bmi of both the genders are identical

"""

#Is the proportion of smokers significantly different in different genders?
# Chi_square test to check if smoking habits are different for different genders
Ho = "Gender has no effect on smoking habits"   # Stating the Null Hypothesis
Ha = "Gender has an effect on smoking habits"   # Stating the Alternate Hypothesis
crosstab = pd.crosstab(insurance_df['sex'],insurance_df['smoker'])  # Contingency table of sex and smoker attributes
chi, p_value, dof, expected =  stats.chi2_contingency(crosstab)
if p_value < 0.05:  # Setting our significance level at 5%
  print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')
else:
  print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')

"""- Proportion of smokers in males is significantly different from that of the females

"""

# Chi_square test to check if smoking habits are different for people of different regions
Ho = "Region has no effect on smoking habits"   # Stating the Null Hypothesis
Ha = "Region has an effect on smoking habits"   # Stating the Alternate Hypothesis
crosstab = pd.crosstab(insurance_df['smoker'], insurance_df['region'])  # Contingency table of sex and smoker attributes
chi, p_value, dof, expected =  stats.chi2_contingency(crosstab)
if p_value < 0.05:  # Setting our significance level at 5%
  print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')
else:
  print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')

"""- Smoking habbits of people of different regions are similar

"""

#Is the distribution of bmi across women with no children, one child and two children, the same ?
# Test to see if the distributions of bmi values for females having different number of children, are significantly different
Ho = "No. of children has no effect on bmi"   # Stating the Null Hypothesis
Ha = "No. of children has an effect on bmi"   # Stating the Alternate Hypothesis
female_df = copy.deepcopy(insurance_df[insurance_df['sex'] == 'female'])
zero = female_df[female_df.children == 0]['bmi']
one = female_df[female_df.children == 1]['bmi']
two = female_df[female_df.children == 2]['bmi']
f_stat, p_value = stats.f_oneway(zero,one,two)
if p_value < 0.05:  # Setting our significance level at 5%
   print(f'{Ha} as the p_value ({p_value.round(3)}) < 0.05')
else:
   print(f'{Ho} as the p_value ({p_value.round(3)}) > 0.05')